
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package letzautomate.appmodel;

import com.hp.lft.sdk.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.53
public class ApplicationName extends AppModelBase {		private CalculatorWindow CalculatorWindow;

	public ApplicationName() throws GeneralLeanFtException 
	{
		setName("ApplicationName");
			CalculatorWindow = new CalculatorWindow(this);
		rebuildDescriptions();
	}
	
	public ApplicationName(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("ApplicationName");
				CalculatorWindow = new CalculatorWindow(contextTestObject, this);
		rebuildDescriptions();
	}	

			public CalculatorWindow CalculatorWindow() { return CalculatorWindow; }

		public class CalculatorWindow extends WindowNodeBase
	{

		
			private button6 button6;
	private button4 button4;
						public CalculatorWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					button6 = new button6(this, applicationModel);
		button4 = new button4(this, applicationModel);
			
			setDisplayName("Calculator");
		}
				public CalculatorWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					button6 = new button6(this, applicationModel);
		button4 = new button4(this, applicationModel);

			setDisplayName("Calculator");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Calculator").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public button6 button6() { return button6; }
		public button4 button4() { return button4; }
		
			public class button6 extends ButtonNodeBase
	{

		
								public button6(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("6");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("6").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class button4 extends ButtonNodeBase
	{

		
								public button4(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("4");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}


			
	public abstract class WindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Window, com.hp.lft.sdk.java.WindowDescription> implements com.hp.lft.sdk.java.Window
	{
		public WindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public WindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws GeneralLeanFtException
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override 
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws GeneralLeanFtException
		{
			getConcrete().close();
		}

		@Override 
		public NativeObject createObject(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public NativeObject createObject(String arg0, Object... arg1) throws GeneralLeanFtException
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public String getBackgroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public String getForegroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public String getLabel() throws GeneralLeanFtException
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override 
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public String getPath() throws GeneralLeanFtException
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public NativeObject getStatics(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public String getTagName() throws GeneralLeanFtException
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public String getTitle() throws GeneralLeanFtException
		{
			return getConcrete().getTitle();
		}

		@Override 
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public WindowState getWindowState() throws GeneralLeanFtException
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws GeneralLeanFtException
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws GeneralLeanFtException
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws GeneralLeanFtException
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws GeneralLeanFtException
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws GeneralLeanFtException
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws GeneralLeanFtException
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws GeneralLeanFtException
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws GeneralLeanFtException
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws GeneralLeanFtException
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws GeneralLeanFtException
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws GeneralLeanFtException
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws GeneralLeanFtException
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws GeneralLeanFtException
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws GeneralLeanFtException
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws GeneralLeanFtException
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Button, com.hp.lft.sdk.java.ButtonDescription> implements com.hp.lft.sdk.java.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws GeneralLeanFtException
		{
			getConcrete().click();
		}

		@Override 
		public void click(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().click(arg0);
		}

		@Override 
		public NativeObject createObject(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public NativeObject createObject(String arg0, Object... arg1) throws GeneralLeanFtException
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends TestObject> TChild describe(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws GeneralLeanFtException
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(ClickArgs arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(MouseButton arg0) throws GeneralLeanFtException
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws GeneralLeanFtException
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(Integer arg0) throws GeneralLeanFtException
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends TestObject> TChild[] findChildren(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws GeneralLeanFtException
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws GeneralLeanFtException
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public String getAttachedText() throws GeneralLeanFtException
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public String getBackgroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public String getDisplayName()
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public String getForegroundColor() throws GeneralLeanFtException
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public String getLabel() throws GeneralLeanFtException
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws GeneralLeanFtException
		{
			return getConcrete().getLocation();
		}

		@Override 
		public String getNativeClass() throws GeneralLeanFtException
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public NativeObject getNativeObject() throws GeneralLeanFtException
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public String getObjectName() throws GeneralLeanFtException
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(String arg0, Class<TValue> arg1) throws GeneralLeanFtException
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public String getPath() throws GeneralLeanFtException
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws GeneralLeanFtException
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws GeneralLeanFtException
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public NativeObject getStatics(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public String getTagName() throws GeneralLeanFtException
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(String arg0) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(String arg0, java.awt.Rectangle arg1) throws GeneralLeanFtException
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public String getVisibleText() throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public String getVisibleText(java.awt.Rectangle arg0) throws GeneralLeanFtException
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws GeneralLeanFtException
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends TestObject> int highlightMatches(Class<TChild> arg0, Description arg1) throws GeneralLeanFtException, CloneNotSupportedException
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws GeneralLeanFtException
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws GeneralLeanFtException
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws GeneralLeanFtException
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(String arg0) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(String arg0, java.util.EnumSet<KeyModifier> arg1) throws GeneralLeanFtException
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(String arg0)
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, ImageMaskArea arg1, byte arg2, byte arg3) throws GeneralLeanFtException
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws GeneralLeanFtException
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws GeneralLeanFtException
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws GeneralLeanFtException
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws GeneralLeanFtException
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws GeneralLeanFtException
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws GeneralLeanFtException
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
